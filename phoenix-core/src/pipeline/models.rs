//! This is the single source of truth for all type transformations. The Plan is
//! generated by the Planner and executed faithfully by the Executor.

use crate::types::PhoenixDataType;
use serde::{Deserialize, Serialize};

/// The top-level container for a complete, multi-stage compression plan.
/// It is serialized to JSON and stored in the final artifact.
#[derive(Serialize, Deserialize, Debug)]
pub struct Plan {
    /// Semantic version of the plan format; incremented when the JSON schema changes.
    pub plan_version: u32,
    /// The data type of the stream before any operations are applied.
    pub initial_type: PhoenixDataType,
    /// The sequence of operations to be executed. The type flow is derived from
    /// this sequence at runtime, not stored.
    pub pipeline: Vec<Operation>,
}

/// An enum representing all possible operations (both linear and meta) in a pipeline.
/// This structure is serialized to and from JSON using serde's tagged enum representation,
/// fulfilling the serialization contract.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(tag = "op", content = "params")]
pub enum Operation {
    // --- Normalization & Type Conversion ---
    CanonicalizeZeros,
    BitCast {
        to_type: PhoenixDataType,
    },

    // --- Value Reduction ---
    Delta {
        order: usize,
    },
    XorDelta,

    // --- Sparsity & Repetition ---
    Rle,
    Dictionary,

    // --- Bit-Width Reduction ---
    ZigZag,
    Leb128,
    BitPack {
        bit_width: u8,
    },

    // --- Byte-level & Entropy ---
    Shuffle,
    Zstd {
        level: i32,
    },
    Ans,

    // --- Meta Operations with Sub-pipelines ---
    Sparsify {
        mask_stream_id: String,
        mask_pipeline: Vec<Operation>,
        values_pipeline: Vec<Operation>,
    },
    ExtractNulls {
        output_stream_id: String,
        null_mask_pipeline: Vec<Operation>,
    },
}
